AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Builds the complete EDA (Event Driven Architecture) infrastructure.

Resources:
  OrdersEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: orders

  # Rule 1 - targets the API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: eventbridge-api-destination
      StageName: Prod
      TracingEnabled: true
      EndpointConfiguration:
        Type: REGIONAL
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
      DefinitionBody:
        openapi: "3.0.1"
        paths:
          /:
            post:
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - basic-auth: []
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
          securitySchemes:
            basic-auth:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "custom"
              x-amazon-apigateway-authorizer:
                type: "request"
                authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomAuthorizerFunction.Arn}/invocations"
                authorizerResultTtlInSeconds: 0
                identitySource: "method.request.header.Authorization"

  ApiGatewayCloudWatchLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogRole.Arn
    DependsOn: Api

  ApiDestinationConnection:
    Type: AWS::Events::Connection
    Properties:
      AuthorizationType: BASIC
      AuthParameters:
        BasicAuthParameters:
          Username: "myUsername"
          Password: !Ref pApiConnectionPassword
      Description: "Connects ApiRule to ApiDestination"
      Name: "basic-auth-connection"

  ApiDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      ConnectionArn: !GetAtt ApiDestinationConnection.Arn
      Description: Events routed to the API must be sent to this endpoint.
      HttpMethod: POST
      InvocationEndpoint:
        Fn::Sub:
          - "https://${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
          - ApiGatewayId: !Ref Api

  ApiDestinationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EventBridgeInvokeApiDestinationRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "EventBridgeInvokeApiDestinationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "events:InvokeApiDestination"
                Resource: !GetAtt ApiDestination.Arn

  ApiGatewayRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Routes events to the API Gateway if event source is com.aws.orders.
      EventBusName: orders
      EventPattern:
        source:
          - com.aws.orders
      Name: rule-api
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - ApiDestination
              - Arn
          Id: "ApiGateway"
          RoleArn: !GetAtt ApiDestinationRole.Arn
    DependsOn:
      - OrdersEventBus

  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 256
      Tracing: Active
      Timeout: 5
      InlineCode: |
        exports.handler = async (event) => {
          console.log(JSON.stringify(event));

          let authorizedUsername = 'myUsername';
          let authorizedPassword = 'myPassword';

          let authorization = event.headers.Authorization
          if (!authorization) {
            return policyDocument('Deny', username, event);
          }

          let credentials = authorization.split(' ')[1]
          let [username, password] = (Buffer.from(credentials, 'base64')).toString().split(':')
          if (!(username === authorizedUsername && password === authorizedPassword)) {
            return policyDocument('Deny', username, event);
          }

          return policyDocument('Allow', username, event);
        };

        function policyDocument(effect, username, event) {
          let methodArn = event.methodArn.split(':');
          let apiGatewayArn = methodArn[5].split('/');
          let accountId = methodArn[4];
          let region = methodArn[3];
          let restApiId = apiGatewayArn[0];
          let stage = apiGatewayArn[1];

          return {
            principalId: username,
            policyDocument: {
              Version: '2012-10-17',
              Statement: [
                {
                  Action: 'execute-api:Invoke',
                  Effect: effect,
                  Resource: `arn:aws:execute-api:${region}:${accountId}:${restApiId}/${stage}/*/*`
                }
              ]
            }
          };
        };

  CustomAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CustomAuthorizerFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/authorizers/*"


  # Rule 2 - targets the State Machine (Step Functions)
  StateMachineRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Targets a State Machine if the event has detail.location == 'eu-east' or 'eu-west'.
      EventBusName: orders
      EventPattern:
        source:
          - com.aws.orders
        detail:
          location:
            - eu-east
            - eu-west
      Name: rule-stateMachine
      State: ENABLED
      Targets:
        - Id: "StateMachine"
          Arn: !GetAtt OrdersStateMachine.Arn
          RoleArn: !GetAtt StateMachineRole.Arn
    DependsOn:
      - OrdersEventBus

  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EventBridgeInvokeStateMachineRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "EventBridgeInvokeStateMachinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !GetAtt OrdersStateMachine.Arn

  OrdersStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: OrderProcessing
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |-
        {
          "Comment": "Processes an Order received from the EventBridge Subscription",
          "StartAt": "ProcessOrder",
          "States": {
            "ProcessOrder": {
              "Type": "Pass",
              "Next": "PublishOrderProcessedEvent"
            },
            "PublishOrderProcessedEvent": {
              "Type": "Task",
              "Resource": "arn:aws:states:::events:putEvents",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "OrderId": "new_id",
                      "OrderDetails.$": "$.detail"
                    },
                    "DetailType": "Order Processed",
                    "EventBusName": "orders",
                    "Source": "com.aws.orders"
                  }
                ]
              },
              "End": true
            }
          }
        }

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: !Sub "states.${AWS::Region}.amazonaws.com"
      Policies:
        - PolicyName: "EventBridgeServiceIntegration"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource: "*"
        - PolicyName: "PushDataToCloudWatchLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: "*"


  # Rule 3 - targets the SNS topic if orders events for lab supplies come from US locations.
  # matching events will be sent to a SQS Queue.
  OrderSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: OrderSnsTopic
      TopicName: OrderSnsTopic
      DeliveryStatusLogging:
        - Protocol: sqs
          FailureFeedbackRoleArn: !GetAtt FailureFeedbackRolePolicy.Arn

  FailureFeedbackRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "SnsCloudWatchLogsAccessPolicy"
          PolicyDocument:
            Version: "2008-10-17"
            Statement:
              - Sid: "SnsFailureLogToCloudWatch"
                Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams" 
                Resource: "arn:aws:logs:*:*:*"

  OrderSqsQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: OrderSqsQueue
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "OrderSqsQueueDlq"
            - "Arn"
        maxReceiveCount: 5
    DependsOn:
      - OrderSqsQueueDlq

  OrderSqsQueueDlq:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: OrderSqsQueueDlq

  Subscription:
    Type: AWS::SNS::Subscription 
    Properties:
      Endpoint: !GetAtt OrderSqsQueue.Arn
      Protocol: SQS
      TopicArn: !Ref OrderSnsTopic

  OrderSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref OrderSnsTopic
      PolicyDocument:
        Version: "2008-10-17"
        Id: "OrderSnsTopicAccessPolicy"
        Statement:          
          - Sid: "PublishToSnsTopic"
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: "SNS:Publish"
            Resource: !Ref OrderSnsTopic

  OrderSqsQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      Queues:
        - !Ref OrderSqsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: "sns.amazonaws.com"
            Action: 'SQS:SendMessage'
            Resource: !GetAtt OrderSqsQueue.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref OrderSnsTopic

  SnsTopicRule:
    Type: AWS::Events::Rule
    Properties:
      Name: rule-snsTopic
      EventBusName: orders
      EventPattern:
        source:
          - com.aws.orders
        detail:
          category:
            - lab-supplies
          location:
            - us-east
            - us-west
      Targets:
        - Arn: !Ref OrderSnsTopic
          Id: OrderSnsTopicTarget

Parameters:
  pApiConnectionPassword:
    Type: String
    Default: "myPassword"
    NoEcho: true
    MinLength: "1"
    MaxLength: "512"
    AllowedPattern: ^[ \t]*[^\x00-\x1F:\x7F]+([ \t]+[^\x00-\x1F:\x7F]+)*[ \t]*$

Outputs:
  OrdersEventBusUrl:
    Description: "URL for the orders EventBus"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/events/home?region=${AWS::Region}#/eventbus/orders"

  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
